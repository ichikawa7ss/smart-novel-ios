//
//  {{ module_info.name }}{{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright Â© {{ year }} {{ developer.company }}. All rights reserved.
//

import Action
import RxCocoa
import RxSwift
import Unio

protocol {{ module_info.name }}ViewModelType: AnyObject {
    var input: InputWrapper<{{ module_info.name }}ViewModel.Input> { get }
    var output: OutputWrapper<{{ module_info.name }}ViewModel.Output> { get }
}

final class {{ module_info.name }}ViewModel: UnioStream<{{ module_info.name }}ViewModel>, {{ module_info.name }}ViewModelType  {

    init(extra: Extra) {
        super.init(input: Input(),
                   state: State(),
                   extra: extra)
    }
}

extension {{ module_info.name }}ViewModel {

    struct Input: InputType {
        // e.g.
        // let viewWillAppear = PublishRelay<Void>()
    }

    struct Output: OutputType {
        // e.g.
        // let reloadAll: Observable<Void>
        // let sections: BehaviorRelay<[{{ module_info.name }}ViewController.Section]>
    }
    
    struct State: StateType {
        // e.g.
        // let networkState = PublishRelay<NetworkState>()
    }

    struct Extra: ExtraType {
        let wireframe: {{ module_info.name }}Wireframe
    }
}

extension {{ module_info.name }}ViewModel {

    static func bind(from dependency: Dependency<Input, State, Extra>, disposeBag: DisposeBag) -> Output {
        let input = dependency.inputObservables
        let state = dependency.state
        var extra = dependency.extra
        
        return Output(
        )
    }
}
